# develop I-crit on âƒŸ ^{K-1} by Monte Carlo

## change the working directory
print(pwd())
cd("C:/Users/Stephen Walsh/Desktop/julia_mixture_devel")

## required packages
using Distributions, Plots, StatsPlots, LinearAlgebra, Random, SpecialFunctions, RCall, Distributed, CSV, DataFrames, Combinatorics

## source functions
@everywhere functions = readdir("Jfunctions\\")
@everywhere functions = functions[findall(occursin.(".jl", functions))]
@everywhere nf = length(functions)
@everywhere for i in 1:nf
    ftemp = string("Jfunctions\\", functions[i])
    include(ftemp)
end

## the functionation



function polytope_vol(L, U; N = 10000, order)
    K         = length(L)
    Vsimp     = 1 / gamma(K)
    D         = Dirichlet(ones(K))
    Xp        = rand(D, N)'
    checkrows = BitArray(undef, N)
    for i in 1:N
        checkcols = BitArray(undef, K)
        for j in 1:K
            checkcols[j] = (Xp[i,j] >= L[j]) & (Xp[i,j] <= U[j])
        end
        checkrows[i] = all(checkcols)
    end
    Vp = Vsimp*mean(checkrows)
    return Vp
end


function polytope_moment_mat(L,U; N = 10000, Vp, order)
    K   = length(L)
    centroid, vm = computeCentroid(L, U)
    #Xp  = rTDirichlet(L, U; N = N)
    Xp  = tDirGibbs(N, L, U, fill(1, K), centroid)
    p   = length(genDesignMat_mix(Xp[1,:]'; order = order))
    MMa = Array{Float64}(undef, p, p, N)
    for i in 1:N
        f            = genDesignMat_mix(Xp[i,:]'; order = order)'
        MMa[:,:,i]   = f * f'
    end
    MM = Vp*mean(MMa, dims = 3)[:,:,1]
    return MM
end



function polytope_moment_mat2(L,U; N = 10000, Vp, order)
    K   = length(L)
    D   = Dirichlet(ones(K))
    st  = rand(D,1)'
    p   = length(genDesignMat_mix(st; order = order))
    MMa = Array{Float64}(undef, p, p, N)
    for i in 1:N
        bad_samp = true
        while bad_samp
            samp_temp = rand(D, 1)'
            checkcols = BitArray(undef, K)
            for j in 1:K
                checkcols[j] = (samp_temp[1,j] >= L[j]) & (samp_temp[1,j] <= U[j])
            end
            good_samp = all(checkcols)
            if good_samp
                f            = genDesignMat_mix(samp_temp; order = order)'
                MMa[:,:,i]   = f * f'
                bad_samp = false
            end
        end
    end
    MM = Vp*mean(MMa, dims = 3)[:,:,1]
    return MM
end


## verify function on full simplex
#K = 3 case
vp = polytope_vol([0 0 0], [1 1 1]; N = 100000, order = 3.2)
mt = polytope_moment_mat([0 0 0], [1 1 1], N = 4000000, Vp = vp, order = 3.2)



B = [ 1/12  1/24  1/24  1/60  1/60  1/120 ;
      1/24  1/12  1/24  1/60  1/120 1/60  ;
      1/24  1/24  1/12  1/120 1/60  1/60  ;
      1/60  1/60  1/120 1/180 1/360 1/360 ;
      1/60  1/120 1/60  1/360 1/180 1/360 ;
      1/120 1/60  1/60  1/360 1/360 1/180  ]

round.(mt - B, digits = 5)
sum(mt - B)



#K = 4 case
vt, mt = polytope_vol_momMat([0 0 0 0], [1 1 1 1], N = 1000000, order = 4.3)

B = [ 1/60   1/120  1/120  1/120  1/360   1/360   1/360   1/720   1/720   1/720   1/2520  1/2520  1/2520  1/5040 ;
      1/120  1/60   1/120  1/120  1/360   1/720   1/720   1/360   1/360   1/720   1/2520  1/2520  1/5040  1/2520 ;
      1/120  1/120  1/60   1/120  1/720   1/360   1/720   1/360   1/720   1/360   1/2520  1/5040  1/2520  1/2520 ;
      1/120  1/120  1/120  1/60   1/720   1/720   1/360   1/720   1/360   1/360   1/5040  1/2520  1/2520  1/2520  ;
      1/360  1/360  1/720  1/720  1/1260  1/2520  1/2520  1/2520  1/2520  1/5040  1/10080 1/10080 1/20160 1/20160 ;
      1/360  1/720  1/360  1/720  1/2520  1/1260  1/2520  1/2520  1/5040  1/2520  1/10080 1/20160 1/10080 1/20160 ;
      1/360  1/720  1/720  1/360  1/2520  1/2520  1/1260  1/5040  1/2520  1/2520  1/20160 1/10080 1/10080 1/20160 ;
      1/720  1/360  1/360  1/720  1/2520  1/2520  1/5040  1/1260  1/2520  1/2520  1/10080 1/20160 1/20160 1/10080 ;
      1/720  1/360  1/720  1/360  1/2520  1/5040  1/2520  1/2520  1/1260  1/2520  1/20160 1/10080 1/20160 1/10080 ;
      1/720  1/720  1/360  1/360  1/5040  1/2520  1/2520  1/2520  1/2520  1/1260  1/20160 1/20160 1/10080 1/10080 ;
      1/2520 1/2520 1/2520 1/5040 1/10080 1/10080 1/20160 1/10080 1/20160 1/20160 1/45360 1/90720 1/90720 1/90720 ;
      1/2520 1/2520 1/5040 1/2520 1/10080 1/20160 1/10080 1/20160 1/10080 1/20160 1/90720 1/45360 1/90720 1/90720 ;
      1/2520 1/5040 1/2520 1/2520 1/20160 1/10080 1/10080 1/20160 1/20160 1/10080 1/90720 1/90720 1/45360 1/90720 ;
      1/5040 1/2520 1/2520 1/2520 1/20160 1/20160 1/20160 1/10080 1/10080 1/10080 1/90720 1/90720 1/90720 1/45360  ]

round.(mt - B, digits = 5)
sum(mt - B)

vt
1/gamma(4)

## now generate for a poly tope
L   = [0.2 0.1 0.1 0.15]
U   = [0.65 0.55 0.2 0.35]
vt  = polytope_vol(L, U; N = 10000000, order = 4.2)
mt  = polytope_moment_mat(L,U; N = 10000000, Vp = vt, order = 4.2)
mt2 = polytope_moment_mat2(L,U; N = 5000000, Vp = vt, order = 4.2)
CSV.write("results/IVconstr/Coetzer_5.3_MM_K4_M4.2_tdirgibbs.csv", DataFrame(foo = [2], a =[mt]))

tdirMM = [0.0007741165562798736 0.000510847799967324 0.00030248689829835007 0.0004738724249347377 0.00017229882609031286 0.00011247401824230646 0.0001758519347317518 7.450352864858866e-5 0.00011307722751379012 6.941943556489877e-5; 0.000510847799967324 0.000535632343156087 0.00024295840146356586 0.0003653246152542184 0.0001509682177146264 7.450352864858868e-5 0.00011307722751379012 7.788285068134619e-5 0.00011287973438223225 5.353466637148098e-5; 0.00030248689829835007 0.00024295840146356586 0.0001361145865013529 0.00020441699272005591 7.450352864858866e-5 4.60899158425236e-5 6.941943556489877e-5 3.7037355762119875e-5 5.353466637148098e-5 3.135657067652568e-5; 0.0004738724249347377 0.0003653246152542184 0.00020441699272005591 0.00033957224878628195 0.00011307722751379012 6.941943556489877e-5 0.0001155238271243176 5.353466637148098e-5 8.583298698670137e-5 5.0106320107163125e-5; 0.00017229882609031286 0.0001509682177146264 7.450352864858866e-5 0.00011307722751379012 4.601257477380504e-5 2.491964000815225e-5 3.8012720326315314e-5 2.184144180071447e-5 3.202462813725335e-5 1.645730820300606e-5; 0.00011247401824230646 7.450352864858868e-5 4.60899158425236e-5 6.941943556489877e-5 2.491964000815225e-5 1.697517386424608e-5 2.5506467553436867e-5 1.1285138636722351e-5 1.6457308203006063e-5 1.0560067502486284e-5; 0.0001758519347317518 0.00011307722751379012 6.941943556489877e-5 0.0001155238271243176 3.8012720326315314e-5 2.5506467553436867e-5 4.230836561004434e-5 1.6457308203006056e-5 2.6582570847213938e-5 1.6895592305969008e-5; 7.450352864858866e-5 7.788285068134619e-5 3.7037355762119875e-5 5.353466637148098e-5 2.184144180071447e-5 1.1285138636722351e-5 1.6457308203006056e-5 1.1762261173609978e-5 1.637829816768282e-5 8.145866534173757e-6; 0.00011307722751379012 0.00011287973438223225 5.353466637148098e-5 8.583298698670137e-5 3.202462813725335e-5 1.6457308203006063e-5 2.6582570847213938e-5 1.637829816768282e-5 2.528702956600543e-5 1.2553193466622242e-5; 6.941943556489877e-5 5.353466637148098e-5 3.135657067652568e-5 5.0106320107163125e-5 1.645730820300606e-5 1.0560067502486284e-5 1.6895592305969008e-5 8.145866534173757e-6 1.2553193466622242e-5 7.674635938897484e-6]


cdirMM = [0.0008217459268286766 0.0005048668750820297 0.00031289511918724324 0.0005020245973992545 0.00017813243686258556 0.00011903291290359432 0.00018857516536379448 7.31148627757687e-5 0.00011578006096380603 7.327336889164558e-5; 0.0005048668750820297 0.00045303532845527715 0.0002244600288941409 0.00035851696862265433 0.00013783951447986573 7.31148627757687e-5 0.00011578006096380603 6.522273741876031e-5 0.00010239139777405591 5.216460237837389e-5; 0.00031289511918724324 0.0002244600288941409 0.0001349517017419834 0.0002107416445462128 7.31148627757687e-5 4.747397461622625e-5 7.327336889164558e-5 3.395782632123242e-5 5.216460237837388e-5 3.2178401612730284e-5; 0.0005020245973992545 0.00035851696862265433 0.0002107416445462128 0.0003615065755109871 0.00011578006096380603 7.327336889164558e-5 0.0001243960021800358 5.216460237837389e-5 8.818090750638915e-5 5.312527166347228e-5; 0.00017813243686258556 0.00013783951447986573 7.31148627757687e-5 0.00011578006096380603 4.493571081069541e-5 2.561543854847952e-5 4.015116930228465e-5 1.9754212294975295e-5 3.081007294730904e-5 1.6746200684317328e-5; 0.00011903291290359432 7.31148627757687e-5 4.747397461622625e-5 7.327336889164558e-5 2.561543854847952e-5 1.7910833360810433e-5 2.728356544116159e-5 1.0999011247993838e-5 1.6746200684317328e-5 1.110610668829936e-5; 0.00018857516536379448 0.00011578006096380603 7.327336889164558e-5 0.0001243960021800358 4.015116930228465e-5 2.728356544116159e-5 4.575705110897965e-5 1.6746200684317328e-5 2.8072618029892144e-5 1.8137496077867037e-5; 7.31148627757687e-5 6.522273741876031e-5 3.395782632123242e-5 5.216460237837389e-5 1.9754212294975295e-5 1.0999011247993838e-5 1.6746200684317328e-5 9.75553011517884e-6 1.4720050267407513e-5 7.882869437390784e-6; 0.00011578006096380603 0.00010239139777405591 5.216460237837388e-5 8.818090750638915e-5 3.081007294730904e-5 1.6746200684317328e-5 2.8072618029892144e-5 1.4720050267407513e-5 2.4462888053897895e-5 1.2815481989256155e-5; 7.327336889164558e-5 5.216460237837389e-5 3.2178401612730284e-5 5.312527166347228e-5 1.6746200684317328e-5 1.110610668829936e-5 1.8137496077867037e-5 7.882869437390784e-6 1.2815481989256155e-5 8.104822467166747e-6]


round.(tdirMM - cdirMM, digits = 5)



function I_criterion_cstr1(X; order)
    k     = size(X)[2]
    Xm    = genDesignMat_mix(X, order = order)
    msize = size(Xm)
    N     = msize[1]
    p     = msize[2]

    # region moments mat calc'd via MC
    B = [0.0007741165562798736 0.000510847799967324 0.00030248689829835007 0.0004738724249347377 0.00017229882609031286 0.00011247401824230646 0.0001758519347317518 7.450352864858866e-5 0.00011307722751379012 6.941943556489877e-5; 0.000510847799967324 0.000535632343156087 0.00024295840146356586 0.0003653246152542184 0.0001509682177146264 7.450352864858868e-5 0.00011307722751379012 7.788285068134619e-5 0.00011287973438223225 5.353466637148098e-5; 0.00030248689829835007 0.00024295840146356586 0.0001361145865013529 0.00020441699272005591 7.450352864858866e-5 4.60899158425236e-5 6.941943556489877e-5 3.7037355762119875e-5 5.353466637148098e-5 3.135657067652568e-5; 0.0004738724249347377 0.0003653246152542184 0.00020441699272005591 0.00033957224878628195 0.00011307722751379012 6.941943556489877e-5 0.0001155238271243176 5.353466637148098e-5 8.583298698670137e-5 5.0106320107163125e-5; 0.00017229882609031286 0.0001509682177146264 7.450352864858866e-5 0.00011307722751379012 4.601257477380504e-5 2.491964000815225e-5 3.8012720326315314e-5 2.184144180071447e-5 3.202462813725335e-5 1.645730820300606e-5; 0.00011247401824230646 7.450352864858868e-5 4.60899158425236e-5 6.941943556489877e-5 2.491964000815225e-5 1.697517386424608e-5 2.5506467553436867e-5 1.1285138636722351e-5 1.6457308203006063e-5 1.0560067502486284e-5; 0.0001758519347317518 0.00011307722751379012 6.941943556489877e-5 0.0001155238271243176 3.8012720326315314e-5 2.5506467553436867e-5 4.230836561004434e-5 1.6457308203006056e-5 2.6582570847213938e-5 1.6895592305969008e-5; 7.450352864858866e-5 7.788285068134619e-5 3.7037355762119875e-5 5.353466637148098e-5 2.184144180071447e-5 1.1285138636722351e-5 1.6457308203006056e-5 1.1762261173609978e-5 1.637829816768282e-5 8.145866534173757e-6; 0.00011307722751379012 0.00011287973438223225 5.353466637148098e-5 8.583298698670137e-5 3.202462813725335e-5 1.6457308203006063e-5 2.6582570847213938e-5 1.637829816768282e-5 2.528702956600543e-5 1.2553193466622242e-5; 6.941943556489877e-5 5.353466637148098e-5 3.135657067652568e-5 5.0106320107163125e-5 1.645730820300606e-5 1.0560067502486284e-5 1.6895592305969008e-5 8.145866534173757e-6 1.2553193466622242e-5 7.674635938897484e-6]


    ## volume of design space calc'd via MC
    V = 0.006007916666666667
    #V = exp(1)/6
    XpX         = transpose(Xm)*Xm
    determinant = det(XpX)

    #NOTE: the N = 16, K = 4 special cubic case, was having a hard time generating
    #       matrix candidates that gave a high design information

    if determinant <eps()^(3)  #eps()^(0.5)
         result =  typemax(Float64)
    else
        temp1 = XpX \ B
        #temp1 = pinv(XpX)*B
        #C  = cholesky(XpX)
        #yt  = \(C.L, B)
        #xt  = \(transpose(C.L), yt)
        result = tr(temp1) / V
    end

    return result

end
